library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top_level is
    Port ( CLK100MHZ : in STD_LOGIC;
           SW_right : in STD_LOGIC_VECTOR (7 downto 0);
           SW_left : in STD_LOGIC_VECTOR (7 downto 0);
           BTNC : in STD_LOGIC;
           JB : out STD_LOGIC;
           JC : out STD_LOGIC); 
end top_level;

architecture Behavioral of top_level is

component servo
    generic (
        clk_hz : integer := 100e6;  -- Clock frequency in Hz (100 MHz)
        pulse_us : integer := 1500;    -- Pulse duration in mikroseconds (default: middle position)
        period_us : integer := 20000;  -- PWM period in mikroseconds
        step_count : integer := 180  -- Number of steps
    );
    Port (
        CLK : in STD_LOGIC;
        RST : in STD_LOGIC;
        position : in integer range 0 to step_count;
        PWM : out STD_LOGIC
    );
end component;

component BinaryToReal
    port (
        binary_input : in std_logic_vector(7 downto 0);
        integer_output : out integer range 0 to 180
    );
end component;

signal position_by_sw_right : integer range 0 to 180;
signal position_by_sw_left : integer range 0 to 180;

begin

servo_right : servo
generic map (
   clk_hz => 100e6,  -- Clock frequency in Hz (100 MHz)
   pulse_us => 1500,    -- Pulse duration in mikroseconds (default: middle position)
   period_us => 20000,  -- PWM period in mikroseconds
   step_count => 180  -- Number of steps
)
port map (
   CLK => CLK100MHZ,
   RST => BTNC,
   position => position_by_sw_right,
   PWM => JB
);   

servo_left : servo
generic map (
   clk_hz => 100e6,  -- Clock frequency in Hz (100 MHz)
   pulse_us => 1500,    -- Pulse duration in mikroseconds (default: middle position)
   period_us => 20000,  -- PWM period in mikroseconds
   step_count => 180  -- Number of steps
)
port map (
   CLK => CLK100MHZ,
   RST => BTNC,
   position => position_by_sw_left,
   PWM => JC
); 

BinaryToReal_right : BinaryToReal
port map (
    binary_input => SW_right,
    integer_output => position_by_sw_right
);

BinaryToReal_left : BinaryToReal
port map (
    binary_input => SW_left,
    integer_output => position_by_sw_left
);

end Behavioral;
